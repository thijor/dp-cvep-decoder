[cvep]
code_file = './'                         # path to file containing the cvep codes
frame_rate_hz = 60                       # frame rate of the cvep stimulation

[training]
data_root = './data/'
training_files_glob = 'sub-P001_ses-S001*.xdf'   # looked up in data_root
out_file = './test.joblib'
out_file_meta = './test_meta.json'
codes_file = '../ThesisSpellerProject/dp-speller/speller/codes/mgold_61_6521.npz'

[training.features]
tmin_s = 0.0
tmax_s = 4.2
target_freq_hz = 120                     # should be aligned with codes for rCCA
passband_hz = [1, 40]
data_stream_name = 'BioSemi'
marker_stream_name = 'KeyboardMarkerStream'
# selected_channels = ['C3', 'Cz', 'C4']   # If provided, only the mne.io.RawArray object will be filtered for these channels 
selected_channels = [
 'A1',
 'A2',
 'A3',
 'A4',
 'A5',
 'A6',
 'A7',
 'A8',
 'A9',
 'A10',
 'A11',
 'A12',
 'A13',
 'A14',
 'A15',
 'A16',
 'A17',
 'A18',
 'A19',
 'A20',
 'A21',
 'A22',
 'A23',
 'A24',
 'A25',
 'A26',
 'A27',
 'A28',
 'A29',
 'A30',
 'A31',
 'A32']

[online]
sleep_s = 0.1                            # time between updates in seconds

[online.input]
lsl_stream_name = 'eeg_data'
buffer_size_s = 1.0
lsl_marker_stream_name = 'my_marker_stream'
# selected_channels = ['C3', 'Cz', 'C4']   # channels to be used for decoding, use the names as they would appear in the lsl streams meta data

[online.output]
lsl_stream_name = 'cvep_decoder'
buffer_size_s = 1.0

[online.classifier]
file = './test.joblib'
meta_file = './test_meta.json'      # contains meta info about the model, including the expected input `sfreq` and frequency `band` for the classifier

[online.eval]
eval_after_type = 'time'                  # 'time', 'nsamples', or 'marker' (if marker, the marker config section must be present)
eval_after_s = 0.1                        # time after which the model is evaluated
eval_after_nsamples = 10                  # number of samples after which the model is evaluated

[online.eval.start]
marker = "1"                               # marker that triggers the start of continuous evaluation, will look at the `lsl_marker_stream_name`
max_time_s = 10                            # maximum time for continuous evaluation
pre_eval_start_s = 0.0                     # time before the start marker that is still considered for decoding 

# Optional: Only required if triggering evals on markers is asked for
[online.eval.marker]
trigger_marker = ["2", "3"]             # each marker appearance in the list will trigger an evaluation, will look at the `lsl_marker_stream_name`


[online.early_stop]
# TBD



